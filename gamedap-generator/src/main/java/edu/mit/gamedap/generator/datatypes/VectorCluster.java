package edu.mit.gamedap.generator.datatypes;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.DoubleAdder;
import java.util.function.DoubleBinaryOperator;

/**
 * Represents an immutable cluster of vectors generated by the competitive learning algorithm.
 */
public class VectorCluster<T> {
  private final List<Vector<T>> vectors;
  private final Vector<T> center;

  private List<Double> cachedDistances = null;

  public VectorCluster (Vector<T> center, List<Vector<T>> vectors) {
    this.center = center;
    this.vectors = vectors;
  }

  public Vector<T> getCenter() {
    return this.center;
  }

  public List<Vector<T>> getVectors() {
    return new ArrayList<>(this.vectors);
  }

  public double getDistanceStdDev() {
    List<Double> distances = calculateDistances();
    double mean = getMeanDistance();

    double result = 0;
    for (double d : distances) {
      result += Math.pow(d - mean, 2);
    }
    return Math.sqrt(result / distances.size());
  }

  private List<Double> calculateDistances() {
    if (cachedDistances == null) {
      cachedDistances = vectors.stream()
        .map(v -> v.distance(center))
        .toList();
    }
    return cachedDistances;
  }

  private double getMeanDistance() {
    List<Double> distances = calculateDistances();
    return distances.stream()
      .reduce(0.0, Double::sum) / distances.size();
  }

  public String info() {
    String vectorString = "[";
    for (Vector<T> v : vectors) {
      vectorString += v.toString() + "  ";
    }
    vectorString += "]";
    return String.format("<VectorCluster (stddev=%.3f): center=%s, vectors=%s",
      this.getDistanceStdDev(), this.center.toString(), vectorString);
  }
}
